import torch
from torch_geometric_temporal.data import StaticGraphTemporalSignal

# 随机生成边索引
edges = torch.randint(0, 5, (2, 6), dtype=torch.long)

# 转换为无向图
edge_index = torch.cat([edges, edges[[1, 0]]], dim=1).unique(dim=1)

# 随机生成4个时间戳下所有节点的特征
num_snapshots = 4
num_nodes = 5
num_features = 3  # 自定义特征数量
features_list = [torch.randn(num_nodes, num_features) for _ in range(num_snapshots)]

# 使用StaticGraphTemporalSignal构建时空图
static_graph = StaticGraphTemporalSignal(edge_index, features_list)

# 输出时空图的相关信息
print("Edge index:")
print(static_graph.edge_index)
print("\nNode features:")
for i, features in enumerate(static_graph.features_list):
    print(f"Snapshot {i + 1}:")
    print(features)

class CustomStaticGraphTemporalSignal(StaticGraphTemporalSignal):
    def __init__(self, edge_index, features_list):
        super(CustomStaticGraphTemporalSignal, self).__init__(edge_index, features_list)

    def compute_average_features_per_snapshot(self):
        average_features_list = []

        for features in self.features_list:
            average_features = torch.mean(features, dim=0)
            average_features_list.append(average_features)

        return average_features_list

custom_static_graph = CustomStaticGraphTemporalSignal(edge_index, features_list)

average_features_list = custom_static_graph.compute_average_features_per_snapshot()

print("\nAverage node features per snapshot:")
for i, average_features in enumerate(average_features_list):
    print(f"Snapshot {i + 1}:")
    print(average_features)
