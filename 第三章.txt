第三章 基于交互式投票的地图匹配方法

3.1.1 基本定义

定义1：路网（RoadNetwork）：将现实道路网建模为一个有向图                                ，与传统路网定义不同，我们将道路定义为路网的节点，路口定义为路网的边。道路示例如例1所示。

例1：

模拟城市路网结构如图1所示，与其对应的路网结构如图2所示，其中节点  表示路段的集合，边  表示路口（  在  中的连通性）的集合，即如果车辆可以从道路  直接行驶到道  ，则有  。

定义2：道路（Road）：道路是路网中最基本的组成单元之一，通常被描述为有向边，但在本文中被描述为一个节点，每条道路都有其固有属性，如车道数、限速、长度等。

定义3：路口（Intersection）：路口是路网中另一个基本组成单元之一，在本文中它被描述为路网中的边，用来表示道路间的关系，每个节点连接着多条路，且存在固有属性，如经纬度、连接道路数等。

定义4：路段（Segment）：大部分道路都是弯曲的，他们由多个路段（Segment）组成，每个路段是两个点连接的直线，在路网匹配过程中将道路划分为多个路段能够提高匹配的精准度。

定义5：路径（Path）路径是一个道路序列                                ，  ，  ，其中  为采样点个数，  和  分别表示路段  的起点和终点。

定义6：GPS轨迹（GPSTrajectory）：GPS轨迹是由GPS采样点  形成的一组序列，其中  为GPS采样点个数，每个采样点用经纬度表示，每条GPS轨迹都有其时间戳、采样频率（连续采样点的时间间隔）等信息。

定义7：局部最优路径（LocalOptimalPath）：对于在GPS轨迹中的任一采样点  的每个候选点  ，  ，其中  为  的候选点个数，通过该候选点  概率最大的路径即为该候选点的局部最优路径。

3.1.2 三维KD树

KD树（K-DimensionalTree，K维树）是一种二叉树数据结构，用于存储和查找K维数据点。它是一种通用的数据结构，可以用于解决各种K维数据处理的问题，如范围查询、最近邻查询、聚类分析等。在KD树中，每个节点代表一个K维数据点，而根据一个维度（通常是x、y、z等坐标轴），将数据点递归地分割成更小的子集，并在每个子集中构建左右子树。例如，对于一个二维的数据集，可以先根据x轴坐标将数据点分为两个子集，然后根据y轴坐标在每个子集中分割为两个子集，递归地构建KD树。最终，构建出一棵二叉树，其中每个叶子节点代表一个K维数据点。通过这种方式构建的KD树可以快速地进行查找和插入操作。例如，要查找某个数据点，可以在树中沿着不同维度递归地向下遍历，直到到达包含目标点的叶子节点。如果要插入一个新的数据点，可以先找到合适的叶子节点，然后将新的数据点插入到该节点中，同时递归地更新该节点的祖先节点，保持树的平衡性和正确性。KD树的主要应用是解决最近邻查询（NearestNeighborSearch，NN查询）问题。在NN查询中，给定一个查询点，需要在KD树中查找距离该点最近的数据点。通过递归地遍历KD树，并根据每个节点与查询点的距离计算出最近邻点，可以高效地解决这个问题。

在三维KD树中，每个节点都代表一个三维空间中的超矩形区域。根据一个维度，比如x轴，将数据点分成两个子集，并递归地构建左右子树。然后，按另一个维度，比如y轴，将每个子集进一步分割，并递归地构建左右子树。最终，构建出一棵二叉树，其中每个叶子节点代表一个三维数据点。通过这种方式构建的三维KD树具有快速搜索和插入的优势。例如，要查找某个数据点，可以在树中沿着不同维度递归地向下遍历，直到到达包含目标点的叶子节点。另外，通过对树的剪枝和平衡化，可以提高其性能和效率。

3.1.3 墨卡托投影技术

墨卡托投影（Mercatorprojection）是一种常用的地图投影方法，在墨卡托投影中，地球被假设为一个旋转的椭球体，投影面垂直于地球的轴线，并以地球的赤道为基准。经度线被平行投影成垂直于地球轴线的等间距直线，而纬度线则被拉伸成等间距的水平线。这样就可以将地球表面的经纬度坐标映射到一个平面上，使得航线和距离等信息更容易理解和计算。Web墨卡托投影（WebMercatorprojection）是一种墨卡托投影的变种，被广泛用于在线地图和地理信息系统（GIS）中。与传统墨卡托投影将地球表面投影到一个标准的平面上不同，Web墨卡托投影使用了一种椭球体投影方式，将地球表面投影到一个椭球体上，然后将椭球体展开成一个标准的平面瓦片。这种投影方式可以有效地处理全球范围内的地图数据，而且具有较好的可视化效果和计算效率，因此被广泛用于在线地图和GIS应用中，其定义如下：

Web墨卡托投影使用了一个球体或椭球体（通常是WGS84椭球体）作为基准，将地球表面上的经纬度坐标投影到一个平面上。投影过程中，球体或椭球体被划分为一组水平和垂直于赤道的网格线，称为“经纬度网格”，然后每个网格被映射到平面坐标系中。具体地，Web墨卡托投影使用了以下公式将经纬度坐标(x,y)转换为平面坐标(x',y')：

​                               

 

其中，  表示经度，  表示纬度，  表示中央经线的经度，  是球体或椭球体的半径。需要注意的是，Web墨卡托投影中的所有坐标都是以米为单位的，并且纬度值使用弧度表示。对于纬度值大于85.0511度或小于-85.0511度的点，Web墨卡托投影会进行特殊处理，将其投影到坐标轴的边界上，以避免出现数值溢出和精度问题。Web墨卡托投影中的坐标系是一个二维的平面直角坐标系，其中x轴和y轴分别代表经度和纬度。

3.2 交互式投票地图匹配方法

3.2.1 系统模型

目前大多数车辆配备的GPS设备所记录的数据包括经纬度、时间戳以及车辆行驶方向与瞬时速度等。但由于存在外部信号干扰或其他因素干扰，会导致GPS设备所记录的信息产生大量噪声，尤其瞬时方向与瞬时速度并不能十分准确的反应真实情况，在我们所提出的地图匹配算法MIVMM中不会直接使用这些数据，而是首先对数据进行初步筛选，过滤掉其中确定为噪声的数据，然后再通过提取数据与数据间的关系信息，进行地图匹配过程。

具体的，所提出的面向立体城市交通网的道路最优匹配方法MIVMM包括以下五个阶段：数据预处理、候选点的匹配、候选点位置上下文分析、采样点相互影响建模以及交互式投票。图3显示了MIVMM算法的整体框架。其中第一阶段的数据预处理包括两方面，一是对原始GPS轨迹进行筛选，二是对原始路网数据进行简化；第二阶段的候选点匹配使用基于三维KD树以及墨卡托投影的KNN算法进行全路网查询，获取第一阶段筛选出的采样点的候选点；第三阶段的候选点位置上下文分析中我们利用数据中位置信息与路网数据以及约束分析为下一阶段提供基础凭证与数据并过滤数据；第四阶段的采样点间相互影响建模包括静态评分矩阵以及距离评分矩阵两部分的综合计算，然后得到加权评分矩阵，再根据加权评分矩阵得到每个候选点的局部最优路径，构建由候选点以及各个候选点的相关数据组成的候选图；第五阶段的交互式投票根据第四阶段构建的候选图进行投票，与传统方法不同的是我们采用对每相邻采样点之间的边进行投票，相邻采样点之间仅选出一个评分最高的候选边作为最终匹配边，进而得到最终的最优匹配路径

由于我们使用的是出租车的轨迹数据，在原始GPS轨迹数据中包含部分车辆静止时采集到的GPS点，我们需要删除这些点，因为车辆在静止时GPS设备采集的数据集中在某一个区域呈现不规则形状。在这种情况下，采样点之间的位置信息为概率性波动，这会干扰采样点间的相互影响，导致后续的计算中产生大量噪声且增加计算时长。如图4所示，红色区域的GPS采样点应删除。

现有的路网数据均为未优化的数据，在路口的表示上，通常有多少个道路交叉点就有多少个路口，如果某个交叉路口道路很多，就会产生大量交叉点，进而增加路网中路口的数量，增加路网复杂度。我们应该将属于同一路口的所有道路交叉点合并为一个交叉点，这样可以简化路网数据，加快有关路网的计算，如查找最短路径以及其相关计算。路网的简化示例如图5所示，图中的四条道路交叉点可视为同一个路口。

通过上述两方面对MIVMM算法中使用的GPS轨迹数据以及路网数据进行预处理，可以大大提升算法的精确度并减少运算量。

3.2.2 候选点匹配及位置上下文分析

\1.   候选点的匹配

由于我们使用的是出租车的轨迹数据，在原始GPS轨迹数据中包含部分车辆静止时采集到的GPS点，我们需要删除这些点，因为车辆在静止时GPS设备采集的数据集中在某一个区域呈现不规则形状。在这种情况下，采样点之间的位置信息为概率性波动，这会干扰采样点间的相互影响，导致后续的计算中产生大量噪声且增加计算时长。如图4所示，红色区域的GPS采样点应删除。

现有的路网数据均为未优化的数据，在路口的表示上，通常有多少个道路交叉点就有多少个路口，如果某个交叉路口道路很多，就会产生大量交叉点，进而增加路网中路口的数量，增加路网复杂度。我们应该将属于同一路口的所有道路交叉点合并为一个交叉点，这样可以简化路网数据，加快有关路网的计算，如查找最短路径以及其相关计算。路网的简化示例如图5所示，图中的四条道路交叉点可视为同一个路口。

通过上述两方面对MIVMM算法中使用的GPS轨迹数据以及路网数据进行预处理，可以大大提升算法的精确度并减少运算量。

如何快速准确的确定每个采样点的候选点对于地图匹配是至关重要的，对于每个GPS采样点                                ，  ，都有候选点  ，  ，其中  为采样点个数，  为候选点个数。首先我们需要获取候选路段，为了快速的得到候选路段，本文使用基于KD树的k近邻算法KNN来获取候选路段，将静态路网数据建模为三维KD树，然后通过三维KD树找出距离采样点最近的候选路段。将经纬度数据映射到三维KD树中，需要将经纬度坐标映射到三维笛卡尔坐标系中，具体的：将经纬度转换为球面坐标系。经度表示在赤道上的角度，纬度表示在子午线上的角度。可以将经纬度转换为球面坐标系的三个参数：半径  、极角  和方位角  ，其中  是球面半径，  表示离北极点的角度，  表示离本初子午线的角度。将球面坐标系转换为笛卡尔坐标系。使用以下公式将球面坐标系中的三个参数转换为笛卡尔坐标系中的  、  和  坐标：

 

 

 

将笛卡尔坐标系中的三个坐标值作为三维KD树节点的值，递归地构建三维KD树。在构建三维KD树时，按照x、y、z坐标轴的顺序进行分割，以便可以快速地查找和插入数据。

只是使用距离来衡量是否为候选路段不太可靠，因此还需要方向属性来进一步提高搜索候选路段的准确度。具体地，KNN算法使用采样点与候选路段之间的欧几里得距离以及车辆方向与候选路段方向之间的夹角来确定候选路段，其公式为：

 

其中，  为时间表，  与  表示权重，  表示车辆采样点与候选路段之间的垂直距离的贡献度：

 

其中  为车辆位置，  为车辆在候选路段上的投影位置，  为位置误差的标准差。车辆行驶方向与候选路段间的方向夹角贡献度：

 

其中  表示车辆的行驶方向，  表示候选路段的方向，  表示车辆方向与候选路段方向的夹角。车辆位置与候选路段之间的垂直距离使用海伦公式  计算，其中  分别为三角形的半周长以及3条边长。

在选出候选路段后，还需要确定候选路段上的候选点，我们使用web墨卡托投影来确定候选路段上的候选点。车辆采样点与候选路段之间存在两种关系：一是过采样点且垂直于路段的线段与该路段相交，如图9所示，这种关系候选点为垂线与路段的交点；另一种关系是过采样点且垂直于路段的线段与该路段不相交，如图10这种情况候选点只能选择距离采样点最近的候选路段的端点。

假设候选路段的两个端点分别为(x_1,y_1 )与(x_2,y_2 )，在平面坐标系中的直线方程为y=k_1 x+b_1。首先计算垂直于此候选路段且过采样点(x_0,y_0 )的直线方程y=k_2 x+b_2，再计算候选路段与此垂线的交点(x_3,y_3 )，判断此交点是否满足x_1≤x_3≤x_2以及y_1≤y_3≤y_2，若不满足则为第一种情况，即候选路段与采样点之间呈钝角三角形关系，候选点为距离采样点最近的端点；若满足则为第二种情况，即候选路段与采样点之间呈直角或锐角三角形关系，候选点为采样点在候选路段上的垂点。
	候选点上下文分析
	点位分析
GPS点的测量误差满足高斯分布N(μ,σ^2 )，其观测概率为：N(c_i^j )=e^(-(d_i^j-μ)^2/(2σ^2 ))。其中a_i^j是采样点p_i的候选点，d_i^j是从候选a_i^j到采样点p_i的欧几里德距离。从候选点a_(i-1)^j到候选点a_i^k的空间分析函数定义为：
S(a_(i-1)^t→a_i^s )=N(a_i^s )×V(a_(i-1)^t→a_i^s ),1≤i≤n-1
其中V(a_(i-1)^j→a_i^k )是过渡概率。目的是测量两个连续候选点之间的最短路径和直路径的相似性。定义为：
V(a_(i-1)^t→a_i^s )=d_(i-1→i)/ω_((i-1,t)→(i,s) ) 
其中d_(i-1→i)是采样点p_(i-1)到采样点p_i的欧几里得距离，ω_((i-1,j)→(i,k) )是从候选a_(i-1)^j到a_i^k的最短路径的长度。在没有交通事故的情况下，车速一般接近道路限速。因此，适当的时间分析函数应在道路限速附近获得最大值。时间分析函数定义为：
T(a_(i-1)^t→a_i^s )=v_((i-1,t)→(i,s) )/(|v_((i-1,t)→(i,s) )-¯v_((i-1,t)→(i,s) ) |+v_((i-1,t)→(i,s) ) )
其中v_((i-1,j)→(i,k) )是从候选点a_(i-1)^j到c_i^k的最短路径的加权速度限制，¯v_((i-1,t)→(i,s) )是沿着候选点a_(i-1)^t至a_i^s之间最短路径行驶的车辆的平均速度。
在地图中，道路通常被分为几个级别，每个级别都有不同的道路限速。高架路的水平高于地面道路，即高架路的限速大于地面道路。因此，我们使用道路水平系数来模拟车辆在某条道路上的趋势。a_(i-1)^t→a_i^s的道路水平系数（RLF）定义为：
RLF(a_(i-1)^t→a_i^s )=v_s/((v_d-v_s )+v_s )
其中v_s和v_d表示a_(i-1)^j和a_i^k所在道路的速度限制。综上，路径a_(i-1)^j→a_i^k的综合权重函数为：
F(a_(i-1)^t→a_i^s )=S(a_(i-1)^t→a_i^s )×T(a_(i-1)^t→a_i^s )×RLF(a_(i-1)^t→a_i^s )
	约束条件
位置上下文的分析结合路网拓扑结构，可以实现对3.4节中生成的候选点进行筛选，减少后续的计算负担。我们从三个方面对所有候选点进行分析：首先，在真实的路网结构中，两个连续采样点的候选点之间可能没有可达道路；其次，根据大量实验结论，错误匹配路径a_(i-1)^t→a_i^s权重值F(a_((i-1))^t→a_i^s )总是小于1.0×〖10〗^(-5)，而正确匹配路径的权重值总是大于1.0×〖10〗^(-5)；最后，路网结构不是平面的，可能有立交桥或城市环岛等立体结构，而投影的结果是在平面坐标系中，因此，可能会将真正属于被遮挡道路的候选点投影到了其上面的道路上。结合以上三点分析，为了过滤错误数据减少后续计算负担，我们提出了以下三个约束：
约束1：相邻采样点的各个候选点之间的连通性需符合真实路网结构，可在路网结构中查询到最短路径，即匹配路径a_((i-1))^t→a_i^s在路网结构中真实存在且能够在合理时间内可到达。
约束2：设两个相邻匹配点的候选点之间的权重F(a_((i-1))^t→a_i^s )的阈值θ=1.0× 〖10〗^(-5)。当路径a_((i-1))^t→a_i^s的权重小于θ时则被视为错误匹配路径，此路径不参与后续计算。
约束3：可以根据不通道路拥有不通的限速这一特性，通过车辆的行驶速度与道路限速的关系进行判断。设¯v (a_(i-1)^t→a_i^s )为车辆沿着候选点a_(i-1)^t到候选点a_i^s之间最短路径行驶的平均速度，¯v_ω (a_(i-1)^t→a_i^s )为a_((i-1))^t→a_i^s所经过的所有道路的加权平均限速。当¯v (a_(i-1)^t→a_i^s )>α¯v_ω (a_(i-1)^t→a_i^s )，时，其中1≤α≤2，路径a_((i-1))^t→a_i^s被视为错误的匹配路径。
约束1保证了后续参与运算的数据都符合实际路网结构，不会出现不存在的路径。约束2保证了不会出现下述情况：如果错误的候选路径的累积权重大于前几个正确候选路径的权重，即便在后续候选中权值逐渐减小，但最终累积权重有概率大于正确路径的权重，导致生成错误的结果。约束3由于考虑了路网的三维结构，通过限速与车辆行驶速度的关系提高了匹配候选路径的准确性。以上三点约束能够在参与后续计算之前过滤掉大部分的错误路径，减少运算时间。

3.2.3 采样点间相互影响建模

连续的GPS采样点之间会相互影响，如下图所示，从                                到  …….。显然，越是靠近该点，对该点的影响就越大。我们以上一节提出的位置上下文分析为建模基础，采用空间分析以及时间分析两个方面来衡量两个连续候选点之间的影响。在计算各个采样点对应的各个候选点之间相互影响的权重之前，我们构建了一个静态评分矩阵：

 

其中  ，此静态评分矩阵中的每个项目仅考虑两个连续点的信息，表示候选点的权重。并不反映它们之间的相互影响。因此，我们可以将其构建为静态矩阵，以减少计算相互影响的权重时的计算负担。我们将采样点间的相互影响建模为  维距离权重矩阵，定义如下：

 

其中，  和  是  和  之间的欧几里德距离，  是相对于道路网的参数。此矩阵给出了所有其他点到  的距离影响的权重。对于  受距离影响的权重可计算为：

 

在得到每个采样点的权重矩阵后，我们根据上一节筛选出的候选点创建候候选图  ，其中  表示各个采样点的候选点集合，  表示前一个采样点的候选点  到当前采样点的候选点  之间的路径集合，通过上一节的分析可知，路径  到  必须同时满足三个约束条件时才会存在边  ，下图为采样点  及其候选点  构成的候选图的结构示例，图中有一部分不满足条件的路径（红色虚线）被删除，后续的计算将不在包括它们；每个节点都拥有观测概率属性，即表示该候选点与其采样点的观测概率，每条边都拥有累积权重与投票数属性，用于后续投票计数。

3.2.4 交互式投票

局部最优路径可以反映最终匹配路径所经过的路径的可能性。如果路径                                （用  表示）被更多的路径所包含，则路径  称为最终路径一部分的概率就越大；如果路径  没有被任何局部最优路径所包含，则最终匹配路径不包括该路径P，局部最优路径查找算法如算法1所示，算法输入为上一节生成的候选图  、距离权重矩阵  以及加权评分矩阵  ，输出为所有候选点的局部最优路径。2行至4行遍历每一个采样点的所有候选点，5行至19行计算候选点的累计权重  ，20行至29行查找每个采样点的候选点中得分最大的候选点，将这些点连成的路径作为这个采样点的局部最优路径。

对于采样点  的每个候选点  ，其中  为采样点个数，  为设置的候选点个数，遍历每个候选点  ，当一个候选点被遍历时，我们假设该候选点就是最终匹配阶级过中正确的匹配点，找到一条通过点  的概率最大的路径作为局部最优路径，查找局部最优解的过程如例4所示。

3.3 实验与评估

在本节中，我们使用真实出租车运营公司提供的全市出租车位置数据来评估MIVMM算法的性能。首先准备实验数据与设置实验方法，然后对MIVMM算法进行评估，并且将本算法与其他地图匹配算法进行多维度的比较，直观清晰的展示各个算法的性能表现。

3.3.1 数据集与实验设置

我们采用由Kaggle提供的葡萄牙波尔图市从2018年6月到2018年9月某出租车运营公司的开放数据集作为评估MIVMM地图匹配算法的基础数据。该数据包括1,710,666条真实出租车轨迹数据，共计83,409,193个轨迹点，部分数据分布如图14所示，在这些数据中，首先需要过滤掉出租车停止所产生的GPS数据，只考虑车辆在行驶过程中产生的数据。在我们的数据中，包括采样时间戳、WGS84坐标经纬度、采样点的瞬时方向与瞬时速度等有效数据，采样间隔在10秒~30秒之间。为了全面评估MIVMM算法的性能，我们选取了三类产生在不同类型道路上的轨迹数据，包括高速公路、城市主干道以及次干道或支路。每种类型的道路随机选出100条轨迹数据进行实验来评估算法性能。在准确率方面的评估，我们根据个人经验，对所有选出的实验数据进行人工点位标注，以确保得到最准确的车辆位置，进而保障准确率的真实性。

为了得到更加严谨与全面的实验结果，在实验中我们评估了多个候选点取值时MIVMM算法在各个性能指标中的数据以及于其他算法的对比，KNN算法不划定查询范围而是查询整个路网。在[53]中提出了GPS设备采集的数据的偏移符合正态分布，其偏移量在                                范围内的概率为95.44%。正态分布函数的参数为：  ，  ，距离权重参数  。本算法使用Python编程语言实现，运行平台配置为：英特尔i7-6700HQ处理器，16GB运行内存，Windows11操作系统。

3.3.2 结果分析与对比

（1）准确率对比

准确率是指算法匹配道路的正确性，为比较直观的对比出算法的准确率，我们对比了AIVMM算法以及ST-Matching算法在三种不同类型道路上（分别为支路、主干道以及高速公路）的准确率表现，使用CMP方法来评估三种算法的准确率：

 图中我们可以得出以下结论：三种算法的匹配准确率与路网的复杂度呈反比关系，即路网结构越复杂（路网结构复杂度：支路或次干道>主干道>高速公路），算法匹配的准确率就越低，因为路网结构越复杂，道路之间的相对距离越小，有些道路密集的位置可能出现立体结构，因此，算法在匹配结果时就越有可能匹配到其他错误的道路上。ST-Matching算法在三种道路上的整体准确率最低，因为ST-Matching没有考虑采样点间的相互影响，只是简单的加权计算；AIVMM算法相较于ST-Matching整体准确率提高了166.56%，但在路网结构复杂的情况下AIVMM的准确率相较于路网结构较简单时有大约10%的差距；本文提出的MIVMM算法由于考虑了采样点之间的相互影响以及墨卡托投影的加入矫正了误差，在三种道路上的准确率都在90%以上，相较于ST-Matching整体准确率提高了187.46%，相较于AIVMM算法整体准确率提高了7.84%，在路网结构较简单的高速公路上MIVMM算法的准确率高达95.7%，远高于ST-Matching，相对于AIVMM算法，MIVMM算法在路网结构复杂的情况下拥有更好的准确率。如图16与图17所示，分别表示AIVMM算法与MIVMM算法的匹配结果，蓝色点表示采样点，红色点表示匹配点。图中我们可以看到虚线内AIVMM匹配的结果误差较大，且部分匹配到了错误的道路上，相较于AIVMM算法，MIVMM算法匹配的结果误差更小，且都匹配到了正确的道路上。           

（1）平均距离误差

平均距离误差MDE是指算法在匹配正确的点到采样点的平均距离，平均距离越小，说明算法的精度越高，越能反应道路真实情况。MDE只考虑匹配正确的点且使用球面坐标系计算距离而不是常规的欧式距离，这样做是为了提高实验的准确度。

图中我们可以看出，整体上路网结构在比较复杂的情况下，相对于路网结构较简单时MDE值更高。在平均距离误差的衡量标准下，AIVMM算法与ST-Matching算法在同一水平，平均距离误差分别为14.92米与15.81米，前者MDE值略低，而MIVMM算法由于使用了全局KNN搜索以及墨卡托投影的加入降低了距离误差，全局KNN搜索确保了结果的全局最优性，墨卡托投影使得距离的计算更加精准，MIVMM的MDE值平均为9.74米，相较AIVMM与ST-Matching降低了约97.4%。图19与图20分别表示AIVMM算法与MIVMM算法的匹配结果，图中我们能够比较直观的看到AIVMM算法与MIVMM算法部分采样点（蓝色标记）与匹配点（红色标记）的匹配结果对比MIVMM算法匹配点与采样点之间相对距离更小，且所有点都匹配到了正确的道路上，而MIVMM算法距离较大且部分采样点没有匹配到正确的道路上。

（1）算法效率

MIVMM、AIVMM以及ST-Matching三种算法执行时间的改变主要因素是候选点个数的设置，候选点个数设置的越大，算法执行时间就越长。在本节中我们分别取候选点个数为2、3、4、5、6时三种算法在Python环境下的执行时长，采样点个数为3872个，结果如下图所示，ST-Matching执行速度最快，但它的准确率最低，MIVMM算法的执行时间小于AIVMM，之所以MIVMM算法在增加了墨卡托投影的计算以及更大的KNN搜索范围后依然缩短了算法执行时间，是因为MIVMM算法优化了LOP（局部最优路径）的过程以及最短路径的匹配算法，由于ST-Matching算法准确率比较低，我们下面只对比AIVMM与MIVMM算法在一些项目上的表现。具体的，MIVMM算法中使用了star*启发式算法，在路网数据中有方向的进行搜索，大大减少了搜索最短路径所消耗的时间，相较于AIVMM算法，MIVMM减少了39.17%%，对比数据如图22所示；由于MIVMM使用了坐标转换以及全局KNN搜索，所以此项目MIVMM运行时间更长，相较于AIVMM算法平均增加了10.67%，对比数据如图23所示；在寻找局部最优路径项目中，我们直接使用了之前为投票阶段生成的候选图直接进行此项目的计算，因此优化了LOP的计算时长，相较于AIVMM算法，MIVMM算法在LOP消耗时长平均降低了22.88%，对比数据如图24所示。综上，虽然MIVMM算法使用了坐标转换、全局KNN搜索以及增加墨卡托投影，但整体算法的效率依然高于AIVMM算法。

（1）算法效益指标（SBM）

由于候选点个数越多，理论上算法的准确率就越高，但算法的效率就越差，寻找到准确率于效率的平衡点尤为重要。在本节中，我们分别测试了候选点个数分别为2、3、4、5、6、7时MIVMM算法在三种不同道路上准确率于效率的表现，结果如图25所示，在图中我们可以看到三种道路呈一致趋势，即随着候选点个数的增加，执行时间也随之增加，准确率逐步提升。候选点个数在2~5之间时，随着候选点个数的增加，图中线的斜率很大，即算法的正确率增长较快，但当候选点个数大于5时，随着候选点个数的增加，图中线的斜率逐渐变小，即算法的准确率提升越来越小，但算法执行时间依然越来越长。综上，MIVMM算法在候选点个数为5是可以保证可观的准确率以及较好的算法效率。

3.4 本章小结

本小结研究了基于web墨卡托投影与交互式投票的地图匹配算法，将GPS设备采集到的位置数据匹配到正确的道路上。我们的方法首先使用卡尔曼滤波法纠正GPS数据中偏差过大的数据点，然后基于GPS采样点之间的相互影响，分别采用空间分析、时间分析以及道路分析来度量连续候选点之间的关系，通过引入三种约束条件，进一步过滤掉数据中的噪声，提升了算法的效率，使用墨卡托投影算法以及球面距离的计算提高了算法的准确度。此外，MIVMM算法使用候选边缘投票，该投票方法相较于候选点的投票对连续点之间的关系更加敏感，因此进一步提高了投票的准确率。通过上一节的实验表明，MIVMM算法对AIVMM算法做出了改进，尤其对于路网结构复杂的情况下大幅提高了算法的准确率，且通过优化查找局部最优路径算法以及使用了启发式star*算法查缩短了寻找最短路径所消耗的时间，使用全局KNN搜索候选路段降低了匹配非最临近路段的可能性，使得MIVMM算法在三种路段上的准确率都达到了90%以上。

